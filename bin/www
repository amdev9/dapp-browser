#!/usr/bin/env node

/**
 * Module dependencies.
 */

const sqlite3 = require( 'sqlite3' )
const debug = require( 'debug' )( 'express:server' )
const http = require( 'http' )

async function onStart () {
	global.sqlite = await new Promise(resolve => {
		const db = new sqlite3.Database( 'database/search.db' )
		const sql = 'CREATE TABLE IF NOT EXISTS results (hash VARCHAR, name VARCHAR, value VARCHAR, url TEXT, icon TEXT)'

		db.serialize(() => db.run(sql, () => resolve( db )))
	})
	
	const port = await normalizePort(process.env.PORT || 33888)

	console.log( port )

	const app = require( '../app' )
	app.set('port', port)

	const server = http.createServer( app )

	server.listen( port )
	server.on('error', onError)
	server.on('listening', () => onListening( server ))
}
 
async function normalizePort ( value ) {
  	var port = parseInt(value, 10)

	if ( isNaN( port ) ) return value
	if ( port >= 0 ) return port
	
	return false
}

async function onError ( error ) {
	if ( error.syscall !== 'listen' ) throw error
	
	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port

	switch ( error.code ) {
		case 'EACCES':
			console.error( bind + ' requires elevated privileges' )
			process.exit( 1 )
		break
		case 'EADDRINUSE':
			console.error( bind + ' is already in use' )
			process.exit( 1 )
		break
		default: throw error
	}
}

async function onListening ( server ) {
  	var addr = server.address()
  	var bind = typeof addr === 'string'
    	? 'pipe ' + addr
    	: 'port ' + addr.port
	  
	debug( 'Listening on ' + bind )
}

onStart()